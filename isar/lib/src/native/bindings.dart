// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class IsarCoreBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<ffi.NativeType> Function<T extends ffi.NativeType>(
      String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IsarCoreBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IsarCoreBindings.fromLookup(
      ffi.Pointer<ffi.NativeType> Function<T extends ffi.NativeType>(
              String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> isar_get_error(
    int err_code,
  ) {
    return _isar_get_error(
      err_code,
    );
  }

  late final _isar_get_error_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get_error>>('isar_get_error');
  late final _dart_isar_get_error _isar_get_error =
      _isar_get_error_ptr.asFunction<_dart_isar_get_error>();

  void isar_free_error(
    ffi.Pointer<ffi.Int8> error,
  ) {
    return _isar_free_error(
      error,
    );
  }

  late final _isar_free_error_ptr =
      _lookup<ffi.NativeFunction<_c_isar_free_error>>('isar_free_error');
  late final _dart_isar_free_error _isar_free_error =
      _isar_free_error_ptr.asFunction<_dart_isar_free_error>();

  int isar_get(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObject> object,
  ) {
    return _isar_get(
      collection,
      txn,
      object,
    );
  }

  late final _isar_get_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get>>('isar_get');
  late final _dart_isar_get _isar_get =
      _isar_get_ptr.asFunction<_dart_isar_get>();

  void isar_get_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> objects,
  ) {
    return _isar_get_all_async(
      collection,
      txn,
      objects,
    );
  }

  late final _isar_get_all_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get_all_async>>('isar_get_all_async');
  late final _dart_isar_get_all_async _isar_get_all_async =
      _isar_get_all_async_ptr.asFunction<_dart_isar_get_all_async>();

  int isar_put(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObject> object,
  ) {
    return _isar_put(
      collection,
      txn,
      object,
    );
  }

  late final _isar_put_ptr =
      _lookup<ffi.NativeFunction<_c_isar_put>>('isar_put');
  late final _dart_isar_put _isar_put =
      _isar_put_ptr.asFunction<_dart_isar_put>();

  void isar_put_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> objects,
  ) {
    return _isar_put_all_async(
      collection,
      txn,
      objects,
    );
  }

  late final _isar_put_all_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_put_all_async>>('isar_put_all_async');
  late final _dart_isar_put_all_async _isar_put_all_async =
      _isar_put_all_async_ptr.asFunction<_dart_isar_put_all_async>();

  int isar_delete(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int oid,
    ffi.Pointer<ffi.Uint8> deleted,
  ) {
    return _isar_delete(
      collection,
      txn,
      oid,
      deleted,
    );
  }

  late final _isar_delete_ptr =
      _lookup<ffi.NativeFunction<_c_isar_delete>>('isar_delete');
  late final _dart_isar_delete _isar_delete =
      _isar_delete_ptr.asFunction<_dart_isar_delete>();

  void isar_delete_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Int64> oids,
    int oids_length,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_delete_all_async(
      collection,
      txn,
      oids,
      oids_length,
      count,
    );
  }

  late final _isar_delete_all_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_delete_all_async>>(
          'isar_delete_all_async');
  late final _dart_isar_delete_all_async _isar_delete_all_async =
      _isar_delete_all_async_ptr.asFunction<_dart_isar_delete_all_async>();

  int isar_clear(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_clear(
      collection,
      txn,
      count,
    );
  }

  late final _isar_clear_ptr =
      _lookup<ffi.NativeFunction<_c_isar_clear>>('isar_clear');
  late final _dart_isar_clear _isar_clear =
      _isar_clear_ptr.asFunction<_dart_isar_clear>();

  void isar_clear_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_clear_async(
      collection,
      txn,
      count,
    );
  }

  late final _isar_clear_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_clear_async>>('isar_clear_async');
  late final _dart_isar_clear_async _isar_clear_async =
      _isar_clear_async_ptr.asFunction<_dart_isar_clear_async>();

  void isar_json_import_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return _isar_json_import_async(
      collection,
      txn,
      json_bytes,
      json_length,
    );
  }

  late final _isar_json_import_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_json_import_async>>(
          'isar_json_import_async');
  late final _dart_isar_json_import_async _isar_json_import_async =
      _isar_json_import_async_ptr.asFunction<_dart_isar_json_import_async>();

  void isar_json_export_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    bool primitive_null,
    bool include_links,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
    ffi.Pointer<ffi.Uint32> json_length,
  ) {
    return _isar_json_export_async(
      collection,
      txn,
      primitive_null ? 1 : 0,
      include_links ? 1 : 0,
      json_bytes,
      json_length,
    );
  }

  late final _isar_json_export_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_json_export_async>>(
          'isar_json_export_async');
  late final _dart_isar_json_export_async _isar_json_export_async =
      _isar_json_export_async_ptr.asFunction<_dart_isar_json_export_async>();

  void isar_free_json(
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return _isar_free_json(
      json_bytes,
      json_length,
    );
  }

  late final _isar_free_json_ptr =
      _lookup<ffi.NativeFunction<_c_isar_free_json>>('isar_free_json');
  late final _dart_isar_free_json _isar_free_json =
      _isar_free_json_ptr.asFunction<_dart_isar_free_json>();

  void isar_connect_dart_api(
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
  ) {
    return _isar_connect_dart_api(
      ptr,
    );
  }

  late final _isar_connect_dart_api_ptr =
      _lookup<ffi.NativeFunction<_c_isar_connect_dart_api>>(
          'isar_connect_dart_api');
  late final _dart_isar_connect_dart_api _isar_connect_dart_api =
      _isar_connect_dart_api_ptr.asFunction<_dart_isar_connect_dart_api>();

  int isar_filter_and_or(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    bool and,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
    int length,
  ) {
    return _isar_filter_and_or(
      filter,
      and ? 1 : 0,
      conditions,
      length,
    );
  }

  late final _isar_filter_and_or_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_and_or>>('isar_filter_and_or');
  late final _dart_isar_filter_and_or _isar_filter_and_or =
      _isar_filter_and_or_ptr.asFunction<_dart_isar_filter_and_or>();

  int isar_filter_not(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.NativeType> condition,
  ) {
    return _isar_filter_not(
      filter,
      condition,
    );
  }

  late final _isar_filter_not_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_not>>('isar_filter_not');
  late final _dart_isar_filter_not _isar_filter_not =
      _isar_filter_not_ptr.asFunction<_dart_isar_filter_not>();

  int isar_filter_link(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> target_collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.NativeType> condition,
    int link_index,
    bool backlink,
  ) {
    return _isar_filter_link(
      collection,
      target_collection,
      filter,
      condition,
      link_index,
      backlink ? 1 : 0,
    );
  }

  late final _isar_filter_link_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_link>>('isar_filter_link');
  late final _dart_isar_filter_link _isar_filter_link =
      _isar_filter_link_ptr.asFunction<_dart_isar_filter_link>();

  int isar_filter_is_null(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int property_index,
  ) {
    return _isar_filter_is_null(
      collection,
      filter,
      property_index,
    );
  }

  late final _isar_filter_is_null_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_is_null>>(
          'isar_filter_is_null');
  late final _dart_isar_filter_is_null _isar_filter_is_null =
      _isar_filter_is_null_ptr.asFunction<_dart_isar_filter_is_null>();

  int isar_filter_byte_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return _isar_filter_byte_between(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_byte_between_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_byte_between>>(
          'isar_filter_byte_between');
  late final _dart_isar_filter_byte_between _isar_filter_byte_between =
      _isar_filter_byte_between_ptr
          .asFunction<_dart_isar_filter_byte_between>();

  int isar_filter_int_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return _isar_filter_int_between(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_int_between_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_int_between>>(
          'isar_filter_int_between');
  late final _dart_isar_filter_int_between _isar_filter_int_between =
      _isar_filter_int_between_ptr.asFunction<_dart_isar_filter_int_between>();

  int isar_filter_float_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    double lower,
    bool include_lower,
    double upper,
    bool include_upper,
    int property_index,
  ) {
    return _isar_filter_float_between(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_float_between_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_float_between>>(
          'isar_filter_float_between');
  late final _dart_isar_filter_float_between _isar_filter_float_between =
      _isar_filter_float_between_ptr
          .asFunction<_dart_isar_filter_float_between>();

  int isar_filter_long_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_index,
  ) {
    return _isar_filter_long_between(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_long_between_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_long_between>>(
          'isar_filter_long_between');
  late final _dart_isar_filter_long_between _isar_filter_long_between =
      _isar_filter_long_between_ptr
          .asFunction<_dart_isar_filter_long_between>();

  int isar_filter_double_between(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    double lower,
    bool include_lower,
    double upper,
    bool include_upper,
    int property_index,
  ) {
    return _isar_filter_double_between(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_double_between_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_double_between>>(
          'isar_filter_double_between');
  late final _dart_isar_filter_double_between _isar_filter_double_between =
      _isar_filter_double_between_ptr
          .asFunction<_dart_isar_filter_double_between>();

  int isar_filter_byte_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return _isar_filter_byte_list_contains(
      collection,
      filter,
      value,
      property_index,
    );
  }

  late final _isar_filter_byte_list_contains_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_byte_list_contains>>(
          'isar_filter_byte_list_contains');
  late final _dart_isar_filter_byte_list_contains
      _isar_filter_byte_list_contains = _isar_filter_byte_list_contains_ptr
          .asFunction<_dart_isar_filter_byte_list_contains>();

  int isar_filter_int_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return _isar_filter_int_list_contains(
      collection,
      filter,
      value,
      property_index,
    );
  }

  late final _isar_filter_int_list_contains_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_int_list_contains>>(
          'isar_filter_int_list_contains');
  late final _dart_isar_filter_int_list_contains
      _isar_filter_int_list_contains = _isar_filter_int_list_contains_ptr
          .asFunction<_dart_isar_filter_int_list_contains>();

  int isar_filter_long_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    int value,
    int property_index,
  ) {
    return _isar_filter_long_list_contains(
      collection,
      filter,
      value,
      property_index,
    );
  }

  late final _isar_filter_long_list_contains_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_long_list_contains>>(
          'isar_filter_long_list_contains');
  late final _dart_isar_filter_long_list_contains
      _isar_filter_long_list_contains = _isar_filter_long_list_contains_ptr
          .asFunction<_dart_isar_filter_long_list_contains>();

  int isar_filter_string_equal(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return _isar_filter_string_equal(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_string_equal_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_string_equal>>(
          'isar_filter_string_equal');
  late final _dart_isar_filter_string_equal _isar_filter_string_equal =
      _isar_filter_string_equal_ptr
          .asFunction<_dart_isar_filter_string_equal>();

  int isar_filter_string_starts_with(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return _isar_filter_string_starts_with(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_string_starts_with_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_string_starts_with>>(
          'isar_filter_string_starts_with');
  late final _dart_isar_filter_string_starts_with
      _isar_filter_string_starts_with = _isar_filter_string_starts_with_ptr
          .asFunction<_dart_isar_filter_string_starts_with>();

  int isar_filter_string_ends_with(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return _isar_filter_string_ends_with(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_string_ends_with_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_string_ends_with>>(
          'isar_filter_string_ends_with');
  late final _dart_isar_filter_string_ends_with _isar_filter_string_ends_with =
      _isar_filter_string_ends_with_ptr
          .asFunction<_dart_isar_filter_string_ends_with>();

  int isar_filter_string_matches(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return _isar_filter_string_matches(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_string_matches_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_string_matches>>(
          'isar_filter_string_matches');
  late final _dart_isar_filter_string_matches _isar_filter_string_matches =
      _isar_filter_string_matches_ptr
          .asFunction<_dart_isar_filter_string_matches>();

  int isar_filter_string_list_contains(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
    int property_index,
  ) {
    return _isar_filter_string_list_contains(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_index,
    );
  }

  late final _isar_filter_string_list_contains_ptr =
      _lookup<ffi.NativeFunction<_c_isar_filter_string_list_contains>>(
          'isar_filter_string_list_contains');
  late final _dart_isar_filter_string_list_contains
      _isar_filter_string_list_contains = _isar_filter_string_list_contains_ptr
          .asFunction<_dart_isar_filter_string_list_contains>();

  void isar_create_instance(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> dir,
    int max_size,
    ffi.Pointer<ffi.Int8> schema_json,
    ffi.Pointer<ffi.Uint8> encryption_key,
    int port,
  ) {
    return _isar_create_instance(
      isar,
      name,
      dir,
      max_size,
      schema_json,
      encryption_key,
      port,
    );
  }

  late final _isar_create_instance_ptr =
      _lookup<ffi.NativeFunction<_c_isar_create_instance>>(
          'isar_create_instance');
  late final _dart_isar_create_instance _isar_create_instance =
      _isar_create_instance_ptr.asFunction<_dart_isar_create_instance>();

  void isar_get_instance(
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _isar_get_instance(
      isar,
      path,
    );
  }

  late final _isar_get_instance_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get_instance>>('isar_get_instance');
  late final _dart_isar_get_instance _isar_get_instance =
      _isar_get_instance_ptr.asFunction<_dart_isar_get_instance>();

  void isar_close_instance(
    ffi.Pointer<ffi.NativeType> isar,
  ) {
    return _isar_close_instance(
      isar,
    );
  }

  late final _isar_close_instance_ptr =
      _lookup<ffi.NativeFunction<_c_isar_close_instance>>(
          'isar_close_instance');
  late final _dart_isar_close_instance _isar_close_instance =
      _isar_close_instance_ptr.asFunction<_dart_isar_close_instance>();

  int isar_get_collection(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
    int index,
  ) {
    return _isar_get_collection(
      isar,
      collection,
      index,
    );
  }

  late final _isar_get_collection_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get_collection>>(
          'isar_get_collection');
  late final _dart_isar_get_collection _isar_get_collection =
      _isar_get_collection_ptr.asFunction<_dart_isar_get_collection>();

  void isar_get_property_offsets(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Uint32> offsets,
  ) {
    return _isar_get_property_offsets(
      collection,
      offsets,
    );
  }

  late final _isar_get_property_offsets_ptr =
      _lookup<ffi.NativeFunction<_c_isar_get_property_offsets>>(
          'isar_get_property_offsets');
  late final _dart_isar_get_property_offsets _isar_get_property_offsets =
      _isar_get_property_offsets_ptr
          .asFunction<_dart_isar_get_property_offsets>();

  int isar_link(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    int target_oid,
  ) {
    return _isar_link(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      target_oid,
    );
  }

  late final _isar_link_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link>>('isar_link');
  late final _dart_isar_link _isar_link =
      _isar_link_ptr.asFunction<_dart_isar_link>();

  int isar_link_unlink(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    int target_oid,
  ) {
    return _isar_link_unlink(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      target_oid,
    );
  }

  late final _isar_link_unlink_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_unlink>>('isar_link_unlink');
  late final _dart_isar_link_unlink _isar_link_unlink =
      _isar_link_unlink_ptr.asFunction<_dart_isar_link_unlink>();

  void isar_link_update_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    ffi.Pointer<ffi.Int64> ids,
    int link_count,
    int unlink_count,
  ) {
    return _isar_link_update_all_async(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      ids,
      link_count,
      unlink_count,
    );
  }

  late final _isar_link_update_all_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_update_all_async>>(
          'isar_link_update_all_async');
  late final _dart_isar_link_update_all_async _isar_link_update_all_async =
      _isar_link_update_all_async_ptr
          .asFunction<_dart_isar_link_update_all_async>();

  int isar_link_replace(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    int target_oid,
  ) {
    return _isar_link_replace(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      target_oid,
    );
  }

  late final _isar_link_replace_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_replace>>('isar_link_replace');
  late final _dart_isar_link_replace _isar_link_replace =
      _isar_link_replace_ptr.asFunction<_dart_isar_link_replace>();

  void isar_link_replace_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    int target_oid,
  ) {
    return _isar_link_replace_async(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      target_oid,
    );
  }

  late final _isar_link_replace_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_replace_async>>(
          'isar_link_replace_async');
  late final _dart_isar_link_replace_async _isar_link_replace_async =
      _isar_link_replace_async_ptr.asFunction<_dart_isar_link_replace_async>();

  int isar_link_get_first(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    ffi.Pointer<RawObject> object,
  ) {
    return _isar_link_get_first(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      object,
    );
  }

  late final _isar_link_get_first_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_get_first>>(
          'isar_link_get_first');
  late final _dart_isar_link_get_first _isar_link_get_first =
      _isar_link_get_first_ptr.asFunction<_dart_isar_link_get_first>();

  void isar_link_get_first_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    ffi.Pointer<RawObject> object,
  ) {
    return _isar_link_get_first_async(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      object,
    );
  }

  late final _isar_link_get_first_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_get_first_async>>(
          'isar_link_get_first_async');
  late final _dart_isar_link_get_first_async _isar_link_get_first_async =
      _isar_link_get_first_async_ptr
          .asFunction<_dart_isar_link_get_first_async>();

  int isar_link_get_all(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    ffi.Pointer<RawObjectSet> result,
  ) {
    return _isar_link_get_all(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      result,
    );
  }

  late final _isar_link_get_all_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_get_all>>('isar_link_get_all');
  late final _dart_isar_link_get_all _isar_link_get_all =
      _isar_link_get_all_ptr.asFunction<_dart_isar_link_get_all>();

  void isar_link_get_all_async(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int link_index,
    bool backlink,
    int oid,
    ffi.Pointer<RawObjectSet> result,
  ) {
    return _isar_link_get_all_async(
      collection,
      txn,
      link_index,
      backlink ? 1 : 0,
      oid,
      result,
    );
  }

  late final _isar_link_get_all_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_link_get_all_async>>(
          'isar_link_get_all_async');
  late final _dart_isar_link_get_all_async _isar_link_get_all_async =
      _isar_link_get_all_async_ptr.asFunction<_dart_isar_link_get_all_async>();

  ffi.Pointer<ffi.NativeType> isar_qb_create(
    ffi.Pointer<ffi.NativeType> collection,
  ) {
    return _isar_qb_create(
      collection,
    );
  }

  late final _isar_qb_create_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_create>>('isar_qb_create');
  late final _dart_isar_qb_create _isar_qb_create =
      _isar_qb_create_ptr.asFunction<_dart_isar_qb_create>();

  int isar_qb_add_id_where_clause(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> builder,
    int lower_oid,
    int upper_oid,
    bool ascending,
  ) {
    return _isar_qb_add_id_where_clause(
      collection,
      builder,
      lower_oid,
      upper_oid,
      ascending ? 1 : 0,
    );
  }

  late final _isar_qb_add_id_where_clause_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_add_id_where_clause>>(
          'isar_qb_add_id_where_clause');
  late final _dart_isar_qb_add_id_where_clause _isar_qb_add_id_where_clause =
      _isar_qb_add_id_where_clause_ptr
          .asFunction<_dart_isar_qb_add_id_where_clause>();

  int isar_qb_add_index_where_clause(
    ffi.Pointer<ffi.NativeType> builder,
    ffi.Pointer<ffi.NativeType> where_clause,
    bool include_lower,
    bool include_upper,
  ) {
    return _isar_qb_add_index_where_clause(
      builder,
      where_clause,
      include_lower ? 1 : 0,
      include_upper ? 1 : 0,
    );
  }

  late final _isar_qb_add_index_where_clause_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_add_index_where_clause>>(
          'isar_qb_add_index_where_clause');
  late final _dart_isar_qb_add_index_where_clause
      _isar_qb_add_index_where_clause = _isar_qb_add_index_where_clause_ptr
          .asFunction<_dart_isar_qb_add_index_where_clause>();

  void isar_qb_set_filter(
    ffi.Pointer<ffi.NativeType> builder,
    ffi.Pointer<ffi.NativeType> filter,
  ) {
    return _isar_qb_set_filter(
      builder,
      filter,
    );
  }

  late final _isar_qb_set_filter_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_set_filter>>('isar_qb_set_filter');
  late final _dart_isar_qb_set_filter _isar_qb_set_filter =
      _isar_qb_set_filter_ptr.asFunction<_dart_isar_qb_set_filter>();

  int isar_qb_add_sort_by(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> builder,
    int property_index,
    bool asc,
  ) {
    return _isar_qb_add_sort_by(
      collection,
      builder,
      property_index,
      asc ? 1 : 0,
    );
  }

  late final _isar_qb_add_sort_by_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_add_sort_by>>(
          'isar_qb_add_sort_by');
  late final _dart_isar_qb_add_sort_by _isar_qb_add_sort_by =
      _isar_qb_add_sort_by_ptr.asFunction<_dart_isar_qb_add_sort_by>();

  int isar_qb_add_distinct_by(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> builder,
    int property_index,
  ) {
    return _isar_qb_add_distinct_by(
      collection,
      builder,
      property_index,
    );
  }

  late final _isar_qb_add_distinct_by_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_add_distinct_by>>(
          'isar_qb_add_distinct_by');
  late final _dart_isar_qb_add_distinct_by _isar_qb_add_distinct_by =
      _isar_qb_add_distinct_by_ptr.asFunction<_dart_isar_qb_add_distinct_by>();

  int isar_qb_set_offset_limit(
    ffi.Pointer<ffi.NativeType> builder,
    int offset,
    int limit,
  ) {
    return _isar_qb_set_offset_limit(
      builder,
      offset,
      limit,
    );
  }

  late final _isar_qb_set_offset_limit_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_set_offset_limit>>(
          'isar_qb_set_offset_limit');
  late final _dart_isar_qb_set_offset_limit _isar_qb_set_offset_limit =
      _isar_qb_set_offset_limit_ptr
          .asFunction<_dart_isar_qb_set_offset_limit>();

  ffi.Pointer<ffi.NativeType> isar_qb_build(
    ffi.Pointer<ffi.NativeType> builder,
  ) {
    return _isar_qb_build(
      builder,
    );
  }

  late final _isar_qb_build_ptr =
      _lookup<ffi.NativeFunction<_c_isar_qb_build>>('isar_qb_build');
  late final _dart_isar_qb_build _isar_qb_build =
      _isar_qb_build_ptr.asFunction<_dart_isar_qb_build>();

  void isar_q_free(
    ffi.Pointer<ffi.NativeType> query,
  ) {
    return _isar_q_free(
      query,
    );
  }

  late final _isar_q_free_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_free>>('isar_q_free');
  late final _dart_isar_q_free _isar_q_free =
      _isar_q_free_ptr.asFunction<_dart_isar_q_free>();

  int isar_q_find(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> result,
    int limit,
  ) {
    return _isar_q_find(
      query,
      txn,
      result,
      limit,
    );
  }

  late final _isar_q_find_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_find>>('isar_q_find');
  late final _dart_isar_q_find _isar_q_find =
      _isar_q_find_ptr.asFunction<_dart_isar_q_find>();

  void isar_q_find_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<RawObjectSet> result,
    int limit,
  ) {
    return _isar_q_find_async(
      query,
      txn,
      result,
      limit,
    );
  }

  late final _isar_q_find_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_find_async>>('isar_q_find_async');
  late final _dart_isar_q_find_async _isar_q_find_async =
      _isar_q_find_async_ptr.asFunction<_dart_isar_q_find_async>();

  int isar_q_count(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_q_count(
      query,
      txn,
      count,
    );
  }

  late final _isar_q_count_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_count>>('isar_q_count');
  late final _dart_isar_q_count _isar_q_count =
      _isar_q_count_ptr.asFunction<_dart_isar_q_count>();

  void isar_q_count_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> txn,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_q_count_async(
      query,
      txn,
      count,
    );
  }

  late final _isar_q_count_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_count_async>>('isar_q_count_async');
  late final _dart_isar_q_count_async _isar_q_count_async =
      _isar_q_count_async_ptr.asFunction<_dart_isar_q_count_async>();

  int isar_q_delete(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_q_delete(
      query,
      collection,
      txn,
      limit,
      count,
    );
  }

  late final _isar_q_delete_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_delete>>('isar_q_delete');
  late final _dart_isar_q_delete _isar_q_delete =
      _isar_q_delete_ptr.asFunction<_dart_isar_q_delete>();

  void isar_q_delete_async(
    ffi.Pointer<ffi.NativeType> query,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> txn,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_q_delete_async(
      query,
      collection,
      txn,
      limit,
      count,
    );
  }

  late final _isar_q_delete_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_q_delete_async>>(
          'isar_q_delete_async');
  late final _dart_isar_q_delete_async _isar_q_delete_async =
      _isar_q_delete_async_ptr.asFunction<_dart_isar_q_delete_async>();

  void isar_free_raw_obj_list(
    ffi.Pointer<RawObjectSet> ros,
  ) {
    return _isar_free_raw_obj_list(
      ros,
    );
  }

  late final _isar_free_raw_obj_list_ptr =
      _lookup<ffi.NativeFunction<_c_isar_free_raw_obj_list>>(
          'isar_free_raw_obj_list');
  late final _dart_isar_free_raw_obj_list _isar_free_raw_obj_list =
      _isar_free_raw_obj_list_ptr.asFunction<_dart_isar_free_raw_obj_list>();

  int isar_txn_begin(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
    bool write,
    bool silent,
  ) {
    return _isar_txn_begin(
      isar,
      txn,
      write ? 1 : 0,
      silent ? 1 : 0,
    );
  }

  late final _isar_txn_begin_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_begin>>('isar_txn_begin');
  late final _dart_isar_txn_begin _isar_txn_begin =
      _isar_txn_begin_ptr.asFunction<_dart_isar_txn_begin>();

  void isar_txn_begin_async(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
    bool write,
    bool silent,
    int port,
  ) {
    return _isar_txn_begin_async(
      isar,
      txn,
      write ? 1 : 0,
      silent ? 1 : 0,
      port,
    );
  }

  late final _isar_txn_begin_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_begin_async>>(
          'isar_txn_begin_async');
  late final _dart_isar_txn_begin_async _isar_txn_begin_async =
      _isar_txn_begin_async_ptr.asFunction<_dart_isar_txn_begin_async>();

  int isar_txn_commit(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return _isar_txn_commit(
      txn,
    );
  }

  late final _isar_txn_commit_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_commit>>('isar_txn_commit');
  late final _dart_isar_txn_commit _isar_txn_commit =
      _isar_txn_commit_ptr.asFunction<_dart_isar_txn_commit>();

  void isar_txn_commit_async(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return _isar_txn_commit_async(
      txn,
    );
  }

  late final _isar_txn_commit_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_commit_async>>(
          'isar_txn_commit_async');
  late final _dart_isar_txn_commit_async _isar_txn_commit_async =
      _isar_txn_commit_async_ptr.asFunction<_dart_isar_txn_commit_async>();

  void isar_txn_abort(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return _isar_txn_abort(
      txn,
    );
  }

  late final _isar_txn_abort_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_abort>>('isar_txn_abort');
  late final _dart_isar_txn_abort _isar_txn_abort =
      _isar_txn_abort_ptr.asFunction<_dart_isar_txn_abort>();

  void isar_txn_abort_async(
    ffi.Pointer<ffi.NativeType> txn,
  ) {
    return _isar_txn_abort_async(
      txn,
    );
  }

  late final _isar_txn_abort_async_ptr =
      _lookup<ffi.NativeFunction<_c_isar_txn_abort_async>>(
          'isar_txn_abort_async');
  late final _dart_isar_txn_abort_async _isar_txn_abort_async =
      _isar_txn_abort_async_ptr.asFunction<_dart_isar_txn_abort_async>();

  ffi.Pointer<ffi.NativeType> isar_watch_collection(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    int port,
  ) {
    return _isar_watch_collection(
      isar,
      collection,
      port,
    );
  }

  late final _isar_watch_collection_ptr =
      _lookup<ffi.NativeFunction<_c_isar_watch_collection>>(
          'isar_watch_collection');
  late final _dart_isar_watch_collection _isar_watch_collection =
      _isar_watch_collection_ptr.asFunction<_dart_isar_watch_collection>();

  ffi.Pointer<ffi.NativeType> isar_watch_object(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    int oid,
    int port,
  ) {
    return _isar_watch_object(
      isar,
      collection,
      oid,
      port,
    );
  }

  late final _isar_watch_object_ptr =
      _lookup<ffi.NativeFunction<_c_isar_watch_object>>('isar_watch_object');
  late final _dart_isar_watch_object _isar_watch_object =
      _isar_watch_object_ptr.asFunction<_dart_isar_watch_object>();

  ffi.Pointer<ffi.NativeType> isar_watch_query(
    ffi.Pointer<ffi.NativeType> isar,
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.NativeType> query,
    int port,
  ) {
    return _isar_watch_query(
      isar,
      collection,
      query,
      port,
    );
  }

  late final _isar_watch_query_ptr =
      _lookup<ffi.NativeFunction<_c_isar_watch_query>>('isar_watch_query');
  late final _dart_isar_watch_query _isar_watch_query =
      _isar_watch_query_ptr.asFunction<_dart_isar_watch_query>();

  void isar_stop_watching(
    ffi.Pointer<ffi.NativeType> handle,
  ) {
    return _isar_stop_watching(
      handle,
    );
  }

  late final _isar_stop_watching_ptr =
      _lookup<ffi.NativeFunction<_c_isar_stop_watching>>('isar_stop_watching');
  late final _dart_isar_stop_watching _isar_stop_watching =
      _isar_stop_watching_ptr.asFunction<_dart_isar_stop_watching>();

  int isar_wc_create(
    ffi.Pointer<ffi.NativeType> collection,
    ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
    int index_index,
    bool skip_duplicates,
    bool ascending,
  ) {
    return _isar_wc_create(
      collection,
      wc,
      index_index,
      skip_duplicates ? 1 : 0,
      ascending ? 1 : 0,
    );
  }

  late final _isar_wc_create_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_create>>('isar_wc_create');
  late final _dart_isar_wc_create _isar_wc_create =
      _isar_wc_create_ptr.asFunction<_dart_isar_wc_create>();

  void isar_wc_add_byte(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return _isar_wc_add_byte(
      where_clause,
      lower,
      upper,
    );
  }

  late final _isar_wc_add_byte_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_byte>>('isar_wc_add_byte');
  late final _dart_isar_wc_add_byte _isar_wc_add_byte =
      _isar_wc_add_byte_ptr.asFunction<_dart_isar_wc_add_byte>();

  void isar_wc_add_int(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return _isar_wc_add_int(
      where_clause,
      lower,
      upper,
    );
  }

  late final _isar_wc_add_int_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_int>>('isar_wc_add_int');
  late final _dart_isar_wc_add_int _isar_wc_add_int =
      _isar_wc_add_int_ptr.asFunction<_dart_isar_wc_add_int>();

  void isar_wc_add_float(
    ffi.Pointer<ffi.NativeType> where_clause,
    double lower,
    double upper,
  ) {
    return _isar_wc_add_float(
      where_clause,
      lower,
      upper,
    );
  }

  late final _isar_wc_add_float_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_float>>('isar_wc_add_float');
  late final _dart_isar_wc_add_float _isar_wc_add_float =
      _isar_wc_add_float_ptr.asFunction<_dart_isar_wc_add_float>();

  void isar_wc_add_long(
    ffi.Pointer<ffi.NativeType> where_clause,
    int lower,
    int upper,
  ) {
    return _isar_wc_add_long(
      where_clause,
      lower,
      upper,
    );
  }

  late final _isar_wc_add_long_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_long>>('isar_wc_add_long');
  late final _dart_isar_wc_add_long _isar_wc_add_long =
      _isar_wc_add_long_ptr.asFunction<_dart_isar_wc_add_long>();

  void isar_wc_add_double(
    ffi.Pointer<ffi.NativeType> where_clause,
    double lower,
    double upper,
  ) {
    return _isar_wc_add_double(
      where_clause,
      lower,
      upper,
    );
  }

  late final _isar_wc_add_double_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_double>>('isar_wc_add_double');
  late final _dart_isar_wc_add_double _isar_wc_add_double =
      _isar_wc_add_double_ptr.asFunction<_dart_isar_wc_add_double>();

  void isar_wc_add_string(
    ffi.Pointer<ffi.NativeType> where_clause,
    ffi.Pointer<ffi.Int8> lower,
    ffi.Pointer<ffi.Int8> upper,
    bool lower_unbounded,
    bool upper_unbounded,
    bool case_sensitive,
    int index_type,
  ) {
    return _isar_wc_add_string(
      where_clause,
      lower,
      upper,
      lower_unbounded ? 1 : 0,
      upper_unbounded ? 1 : 0,
      case_sensitive ? 1 : 0,
      index_type,
    );
  }

  late final _isar_wc_add_string_ptr =
      _lookup<ffi.NativeFunction<_c_isar_wc_add_string>>('isar_wc_add_string');
  late final _dart_isar_wc_add_string _isar_wc_add_string =
      _isar_wc_add_string_ptr.asFunction<_dart_isar_wc_add_string>();
}

abstract class RawObject extends ffi.Struct {
  @ffi.Int64()
  external int oid;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Uint32()
  external int buffer_length;
}

class RawObjectSet extends ffi.Struct {
  external ffi.Pointer<RawObject> objects;

  @ffi.Uint32()
  external int length;
}

typedef _c_isar_get_error = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err_code,
);

typedef _dart_isar_get_error = ffi.Pointer<ffi.Int8> Function(
  int err_code,
);

typedef _c_isar_free_error = ffi.Void Function(
  ffi.Pointer<ffi.Int8> error,
);

typedef _dart_isar_free_error = void Function(
  ffi.Pointer<ffi.Int8> error,
);

typedef _c_isar_get = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_get = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_get_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _dart_isar_get_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _c_isar_put = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_put = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_put_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _dart_isar_put_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> objects,
);

typedef _c_isar_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Int64 oid,
  ffi.Pointer<ffi.Uint8> deleted,
);

typedef _dart_isar_delete = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int oid,
  ffi.Pointer<ffi.Uint8> deleted,
);

typedef _c_isar_delete_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Int64> oids,
  ffi.Uint32 oids_length,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_delete_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Int64> oids,
  int oids_length,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_clear = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_clear = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_clear_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_clear_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_json_import_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint8> json_bytes,
  ffi.Uint32 json_length,
);

typedef _dart_isar_json_import_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint8> json_bytes,
  int json_length,
);

typedef _c_isar_json_export_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint8 primitive_null,
  ffi.Uint8 include_links,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
  ffi.Pointer<ffi.Uint32> json_length,
);

typedef _dart_isar_json_export_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int primitive_null,
  int include_links,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
  ffi.Pointer<ffi.Uint32> json_length,
);

typedef _c_isar_free_json = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> json_bytes,
  ffi.Uint32 json_length,
);

typedef _dart_isar_free_json = void Function(
  ffi.Pointer<ffi.Uint8> json_bytes,
  int json_length,
);

typedef DartPostCObjectFnType = ffi.Int8 Function(
  ffi.Int64,
  ffi.Pointer<ffi.Dart_CObject>,
);

typedef _c_isar_connect_dart_api = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);

typedef _dart_isar_connect_dart_api = void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);

typedef _c_isar_filter_and_or = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 and,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
  ffi.Uint32 length,
);

typedef _dart_isar_filter_and_or = int Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int and,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> conditions,
  int length,
);

typedef _c_isar_filter_not = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
);

typedef _dart_isar_filter_not = int Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
);

typedef _c_isar_filter_link = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> target_collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
  ffi.Uint32 link_index,
  ffi.Uint8 backlink,
);

typedef _dart_isar_filter_link = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> target_collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.NativeType> condition,
  int link_index,
  int backlink,
);

typedef _c_isar_filter_is_null = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_is_null = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int property_index,
);

typedef _c_isar_filter_byte_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 lower,
  ffi.Uint8 include_lower,
  ffi.Uint8 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_byte_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_int_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int32 lower,
  ffi.Uint8 include_lower,
  ffi.Int32 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_int_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_float_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Float lower,
  ffi.Uint8 include_lower,
  ffi.Float upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_float_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  double lower,
  int include_lower,
  double upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_long_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int64 lower,
  ffi.Uint8 include_lower,
  ffi.Int64 upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_long_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int lower,
  int include_lower,
  int upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_double_between = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Double lower,
  ffi.Uint8 include_lower,
  ffi.Double upper,
  ffi.Uint8 include_upper,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_double_between = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  double lower,
  int include_lower,
  double upper,
  int include_upper,
  int property_index,
);

typedef _c_isar_filter_byte_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Uint8 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_byte_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_int_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int32 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_int_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_long_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Int64 value,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_long_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  int value,
  int property_index,
);

typedef _c_isar_filter_string_equal = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_equal = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_starts_with = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_starts_with = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_ends_with = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_ends_with = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_matches = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_matches = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_filter_string_list_contains = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
  ffi.Uint32 property_index,
);

typedef _dart_isar_filter_string_list_contains = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> filter,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
  int property_index,
);

typedef _c_isar_create_instance = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> dir,
  ffi.Int64 max_size,
  ffi.Pointer<ffi.Int8> schema_json,
  ffi.Pointer<ffi.Uint8> encryption_key,
  ffi.Int64 port,
);

typedef _dart_isar_create_instance = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> dir,
  int max_size,
  ffi.Pointer<ffi.Int8> schema_json,
  ffi.Pointer<ffi.Uint8> encryption_key,
  int port,
);

typedef _c_isar_get_instance = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_isar_get_instance = void Function(
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> isar,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_isar_close_instance = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> isar,
);

typedef _dart_isar_close_instance = void Function(
  ffi.Pointer<ffi.NativeType> isar,
);

typedef _c_isar_get_collection = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
  ffi.Uint32 index,
);

typedef _dart_isar_get_collection = int Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> collection,
  int index,
);

typedef _c_isar_get_property_offsets = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Uint32> offsets,
);

typedef _dart_isar_get_property_offsets = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Uint32> offsets,
);

typedef _c_isar_link = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Int64 target_oid,
);

typedef _dart_isar_link = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  int target_oid,
);

typedef _c_isar_link_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Int64 target_oid,
);

typedef _dart_isar_link_unlink = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  int target_oid,
);

typedef _c_isar_link_update_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Pointer<ffi.Int64> ids,
  ffi.Uint32 link_count,
  ffi.Uint32 unlink_count,
);

typedef _dart_isar_link_update_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  ffi.Pointer<ffi.Int64> ids,
  int link_count,
  int unlink_count,
);

typedef _c_isar_link_replace = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Int64 target_oid,
);

typedef _dart_isar_link_replace = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  int target_oid,
);

typedef _c_isar_link_replace_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Int64 target_oid,
);

typedef _dart_isar_link_replace_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  int target_oid,
);

typedef _c_isar_link_get_first = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_link_get_first = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_link_get_first_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Pointer<RawObject> object,
);

typedef _dart_isar_link_get_first_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  ffi.Pointer<RawObject> object,
);

typedef _c_isar_link_get_all = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Pointer<RawObjectSet> result,
);

typedef _dart_isar_link_get_all = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  ffi.Pointer<RawObjectSet> result,
);

typedef _c_isar_link_get_all_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint64 link_index,
  ffi.Uint8 backlink,
  ffi.Int64 oid,
  ffi.Pointer<RawObjectSet> result,
);

typedef _dart_isar_link_get_all_async = void Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int link_index,
  int backlink,
  int oid,
  ffi.Pointer<RawObjectSet> result,
);

typedef _c_isar_qb_create = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> collection,
);

typedef _dart_isar_qb_create = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> collection,
);

typedef _c_isar_qb_add_id_where_clause = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Int64 lower_oid,
  ffi.Int64 upper_oid,
  ffi.Uint8 ascending,
);

typedef _dart_isar_qb_add_id_where_clause = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  int lower_oid,
  int upper_oid,
  int ascending,
);

typedef _c_isar_qb_add_index_where_clause = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Uint8 include_lower,
  ffi.Uint8 include_upper,
);

typedef _dart_isar_qb_add_index_where_clause = int Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> where_clause,
  int include_lower,
  int include_upper,
);

typedef _c_isar_qb_set_filter = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> filter,
);

typedef _dart_isar_qb_set_filter = void Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Pointer<ffi.NativeType> filter,
);

typedef _c_isar_qb_add_sort_by = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Uint32 property_index,
  ffi.Uint8 asc,
);

typedef _dart_isar_qb_add_sort_by = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  int property_index,
  int asc,
);

typedef _c_isar_qb_add_distinct_by = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Uint32 property_index,
);

typedef _dart_isar_qb_add_distinct_by = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> builder,
  int property_index,
);

typedef _c_isar_qb_set_offset_limit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> builder,
  ffi.Int64 offset,
  ffi.Int64 limit,
);

typedef _dart_isar_qb_set_offset_limit = int Function(
  ffi.Pointer<ffi.NativeType> builder,
  int offset,
  int limit,
);

typedef _c_isar_qb_build = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> builder,
);

typedef _dart_isar_qb_build = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> builder,
);

typedef _c_isar_q_free = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
);

typedef _dart_isar_q_free = void Function(
  ffi.Pointer<ffi.NativeType> query,
);

typedef _c_isar_q_find = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  ffi.Uint32 limit,
);

typedef _dart_isar_q_find = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  int limit,
);

typedef _c_isar_q_find_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  ffi.Uint32 limit,
);

typedef _dart_isar_q_find_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<RawObjectSet> result,
  int limit,
);

typedef _c_isar_q_count = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_count = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_count_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_count_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint32 limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_delete = int Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_q_delete_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  ffi.Uint32 limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _dart_isar_q_delete_async = void Function(
  ffi.Pointer<ffi.NativeType> query,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> txn,
  int limit,
  ffi.Pointer<ffi.Uint32> count,
);

typedef _c_isar_free_raw_obj_list = ffi.Void Function(
  ffi.Pointer<RawObjectSet> ros,
);

typedef _dart_isar_free_raw_obj_list = void Function(
  ffi.Pointer<RawObjectSet> ros,
);

typedef _c_isar_txn_begin = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  ffi.Uint8 write,
  ffi.Uint8 silent,
);

typedef _dart_isar_txn_begin = int Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  int write,
  int silent,
);

typedef _c_isar_txn_begin_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  ffi.Uint8 write,
  ffi.Uint8 silent,
  ffi.Int64 port,
);

typedef _dart_isar_txn_begin_async = void Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> txn,
  int write,
  int silent,
  int port,
);

typedef _c_isar_txn_commit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_commit = int Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_commit_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_commit_async = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_abort = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_abort = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_txn_abort_async = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _dart_isar_txn_abort_async = void Function(
  ffi.Pointer<ffi.NativeType> txn,
);

typedef _c_isar_watch_collection = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Int64 port,
);

typedef _dart_isar_watch_collection = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  int port,
);

typedef _c_isar_watch_object = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Int64 oid,
  ffi.Int64 port,
);

typedef _dart_isar_watch_object = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  int oid,
  int port,
);

typedef _c_isar_watch_query = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> query,
  ffi.Int64 port,
);

typedef _dart_isar_watch_query = ffi.Pointer<ffi.NativeType> Function(
  ffi.Pointer<ffi.NativeType> isar,
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.NativeType> query,
  int port,
);

typedef _c_isar_stop_watching = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> handle,
);

typedef _dart_isar_stop_watching = void Function(
  ffi.Pointer<ffi.NativeType> handle,
);

typedef _c_isar_wc_create = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
  ffi.Int32 index_index,
  ffi.Uint8 skip_duplicates,
  ffi.Uint8 ascending,
);

typedef _dart_isar_wc_create = int Function(
  ffi.Pointer<ffi.NativeType> collection,
  ffi.Pointer<ffi.Pointer<ffi.NativeType>> wc,
  int index_index,
  int skip_duplicates,
  int ascending,
);

typedef _c_isar_wc_add_byte = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Uint8 lower,
  ffi.Uint8 upper,
);

typedef _dart_isar_wc_add_byte = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_int = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Int32 lower,
  ffi.Int32 upper,
);

typedef _dart_isar_wc_add_int = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_float = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Float lower,
  ffi.Float upper,
);

typedef _dart_isar_wc_add_float = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  double lower,
  double upper,
);

typedef _c_isar_wc_add_long = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Int64 lower,
  ffi.Int64 upper,
);

typedef _dart_isar_wc_add_long = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  int lower,
  int upper,
);

typedef _c_isar_wc_add_double = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Double lower,
  ffi.Double upper,
);

typedef _dart_isar_wc_add_double = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  double lower,
  double upper,
);

typedef _c_isar_wc_add_string = ffi.Void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  ffi.Uint8 lower_unbounded,
  ffi.Uint8 upper_unbounded,
  ffi.Uint8 case_sensitive,
  ffi.Uint8 index_type,
);

typedef _dart_isar_wc_add_string = void Function(
  ffi.Pointer<ffi.NativeType> where_clause,
  ffi.Pointer<ffi.Int8> lower,
  ffi.Pointer<ffi.Int8> upper,
  int lower_unbounded,
  int upper_unbounded,
  int case_sensitive,
  int index_type,
);
