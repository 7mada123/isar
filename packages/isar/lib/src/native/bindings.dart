// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class IsarCoreBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IsarCoreBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IsarCoreBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Uint32> isar_find_word_boundaries(
    ffi.Pointer<ffi.Uint8> input_bytes,
    int length,
    ffi.Pointer<ffi.Uint32> number_words,
  ) {
    return _isar_find_word_boundaries(
      input_bytes,
      length,
      number_words,
    );
  }

  late final _isar_find_word_boundariesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('isar_find_word_boundaries');
  late final _isar_find_word_boundaries =
      _isar_find_word_boundariesPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint32>)>();

  void isar_free_word_boundaries(
    ffi.Pointer<ffi.Uint32> boundaries,
    int word_count,
  ) {
    return _isar_free_word_boundaries(
      boundaries,
      word_count,
    );
  }

  late final _isar_free_word_boundariesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('isar_free_word_boundaries');
  late final _isar_free_word_boundaries = _isar_free_word_boundariesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint32>, int)>();

  ffi.Pointer<ffi.Char> isar_get_error(
    int err_code,
  ) {
    return _isar_get_error(
      err_code,
    );
  }

  late final _isar_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int64)>>(
          'isar_get_error');
  late final _isar_get_error =
      _isar_get_errorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void isar_free_error(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _isar_free_error(
      error,
    );
  }

  late final _isar_free_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'isar_free_error');
  late final _isar_free_error =
      _isar_free_errorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void isar_free_c_object_set(
    ffi.Pointer<CObjectSet> ros,
  ) {
    return _isar_free_c_object_set(
      ros,
    );
  }

  late final _isar_free_c_object_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CObjectSet>)>>(
          'isar_free_c_object_set');
  late final _isar_free_c_object_set = _isar_free_c_object_setPtr
      .asFunction<void Function(ffi.Pointer<CObjectSet>)>();

  int isar_get(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CObject> object,
  ) {
    return _isar_get(
      collection,
      txn,
      object,
    );
  }

  late final _isar_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CObject>)>>('isar_get');
  late final _isar_get = _isar_getPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<CObject>)>();

  int isar_get_by_index(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int index_id,
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<CObject> object,
  ) {
    return _isar_get_by_index(
      collection,
      txn,
      index_id,
      key,
      object,
    );
  }

  late final _isar_get_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Pointer<IndexKey>,
              ffi.Pointer<CObject>)>>('isar_get_by_index');
  late final _isar_get_by_index = _isar_get_by_indexPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int,
          ffi.Pointer<IndexKey>, ffi.Pointer<CObject>)>();

  int isar_get_all(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CObjectSet> objects,
  ) {
    return _isar_get_all(
      collection,
      txn,
      objects,
    );
  }

  late final _isar_get_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CObjectSet>)>>('isar_get_all');
  late final _isar_get_all = _isar_get_allPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<CObjectSet>)>();

  int isar_get_all_by_index(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int index_id,
    ffi.Pointer<ffi.Pointer<IndexKey>> keys,
    ffi.Pointer<CObjectSet> objects,
  ) {
    return _isar_get_all_by_index(
      collection,
      txn,
      index_id,
      keys,
      objects,
    );
  }

  late final _isar_get_all_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<IndexKey>>,
              ffi.Pointer<CObjectSet>)>>('isar_get_all_by_index');
  late final _isar_get_all_by_index = _isar_get_all_by_indexPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int,
          ffi.Pointer<ffi.Pointer<IndexKey>>, ffi.Pointer<CObjectSet>)>();

  int isar_put(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CObject> object,
  ) {
    return _isar_put(
      collection,
      txn,
      object,
    );
  }

  late final _isar_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CObject>)>>('isar_put');
  late final _isar_put = _isar_putPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<CObject>)>();

  int isar_put_all(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CObjectLinkSet> objects_links,
  ) {
    return _isar_put_all(
      collection,
      txn,
      objects_links,
    );
  }

  late final _isar_put_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CObjectLinkSet>)>>('isar_put_all');
  late final _isar_put_all = _isar_put_allPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<CObjectLinkSet>)>();

  int isar_delete(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int id,
    ffi.Pointer<ffi.Uint8> deleted,
  ) {
    return _isar_delete(
      collection,
      txn,
      id,
      deleted,
    );
  }

  late final _isar_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Int64, ffi.Pointer<ffi.Uint8>)>>('isar_delete');
  late final _isar_delete = _isar_deletePtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int isar_delete_by_index(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int index_id,
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Uint8> deleted,
  ) {
    return _isar_delete_by_index(
      collection,
      txn,
      index_id,
      key,
      deleted,
    );
  }

  late final _isar_delete_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Pointer<IndexKey>,
              ffi.Pointer<ffi.Uint8>)>>('isar_delete_by_index');
  late final _isar_delete_by_index = _isar_delete_by_indexPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int,
          ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Uint8>)>();

  int isar_delete_all(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<ffi.Int64> ids,
    int ids_length,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_delete_all(
      collection,
      txn,
      ids,
      ids_length,
      count,
    );
  }

  late final _isar_delete_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<ffi.Int64>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('isar_delete_all');
  late final _isar_delete_all = _isar_delete_allPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Uint32>)>();

  int isar_delete_all_by_index(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int index_id,
    ffi.Pointer<ffi.Pointer<IndexKey>> keys,
    int keys_length,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_delete_all_by_index(
      collection,
      txn,
      index_id,
      keys,
      keys_length,
      count,
    );
  }

  late final _isar_delete_all_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<IndexKey>>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('isar_delete_all_by_index');
  late final _isar_delete_all_by_index =
      _isar_delete_all_by_indexPtr.asFunction<
          int Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              int,
              ffi.Pointer<ffi.Pointer<IndexKey>>,
              int,
              ffi.Pointer<ffi.Uint32>)>();

  int isar_clear(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
  ) {
    return _isar_clear(
      collection,
      txn,
    );
  }

  late final _isar_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>)>>('isar_clear');
  late final _isar_clear = _isar_clearPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>)>();

  int isar_json_import(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<ffi.Char> id_name,
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return _isar_json_import(
      collection,
      txn,
      id_name,
      json_bytes,
      json_length,
    );
  }

  late final _isar_json_importPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>>('isar_json_import');
  late final _isar_json_import = _isar_json_importPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  int isar_count(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<ffi.Int64> count,
  ) {
    return _isar_count(
      collection,
      txn,
      count,
    );
  }

  late final _isar_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<ffi.Int64>)>>('isar_count');
  late final _isar_count = _isar_countPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<ffi.Int64>)>();

  int isar_get_size(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    bool include_indexes,
    bool include_links,
    ffi.Pointer<ffi.Int64> size,
  ) {
    return _isar_get_size(
      collection,
      txn,
      include_indexes ? 1 : 0,
      include_links ? 1 : 0,
      size,
    );
  }

  late final _isar_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Uint8, ffi.Uint8, ffi.Pointer<ffi.Int64>)>>('isar_get_size');
  late final _isar_get_size = _isar_get_sizePtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int, int,
          ffi.Pointer<ffi.Int64>)>();

  void isar_connect_dart_api(
    DartPostCObjectFnType ptr,
  ) {
    return _isar_connect_dart_api(
      ptr,
    );
  }

  late final _isar_connect_dart_apiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'isar_connect_dart_api');
  late final _isar_connect_dart_api = _isar_connect_dart_apiPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void isar_filter_static(
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    bool value,
  ) {
    return _isar_filter_static(
      filter,
      value ? 1 : 0,
    );
  }

  late final _isar_filter_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Uint8)>>('isar_filter_static');
  late final _isar_filter_static = _isar_filter_staticPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<Filter>>, int)>();

  void isar_filter_and_or(
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    bool and,
    ffi.Pointer<ffi.Pointer<Filter>> conditions,
    int length,
  ) {
    return _isar_filter_and_or(
      filter,
      and ? 1 : 0,
      conditions,
      length,
    );
  }

  late final _isar_filter_and_orPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Uint8,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Uint32)>>('isar_filter_and_or');
  late final _isar_filter_and_or = _isar_filter_and_orPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Filter>>, int,
          ffi.Pointer<ffi.Pointer<Filter>>, int)>();

  void isar_filter_not(
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<Filter> condition,
  ) {
    return _isar_filter_not(
      filter,
      condition,
    );
  }

  late final _isar_filter_notPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<Filter>)>>('isar_filter_not');
  late final _isar_filter_not = _isar_filter_notPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Filter>>, ffi.Pointer<Filter>)>();

  int isar_filter_link(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<Filter> condition,
    int link_id,
  ) {
    return _isar_filter_link(
      collection,
      filter,
      condition,
      link_id,
    );
  }

  late final _isar_filter_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<Filter>,
              ffi.Uint32)>>('isar_filter_link');
  late final _isar_filter_link = _isar_filter_linkPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>, ffi.Pointer<Filter>, int)>();

  int isar_filter_null(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    int property_id,
    bool any_null,
  ) {
    return _isar_filter_null(
      collection,
      filter,
      property_id,
      any_null ? 1 : 0,
    );
  }

  late final _isar_filter_nullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Uint32,
              ffi.Uint8)>>('isar_filter_null');
  late final _isar_filter_null = _isar_filter_nullPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>, int, int)>();

  int isar_filter_id(
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
  ) {
    return _isar_filter_id(
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
    );
  }

  late final _isar_filter_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Pointer<Filter>>, ffi.Int64,
              ffi.Uint8, ffi.Int64, ffi.Uint8)>>('isar_filter_id');
  late final _isar_filter_id = _isar_filter_idPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<Filter>>, int, int, int, int)>();

  int isar_filter_byte(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_id,
  ) {
    return _isar_filter_byte(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_byte');
  late final _isar_filter_byte = _isar_filter_bytePtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>, int, int, int, int, int)>();

  int isar_filter_long(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    int lower,
    bool include_lower,
    int upper,
    bool include_upper,
    int property_id,
  ) {
    return _isar_filter_long(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Int64,
              ffi.Uint8,
              ffi.Int64,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_long');
  late final _isar_filter_long = _isar_filter_longPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>, int, int, int, int, int)>();

  int isar_filter_double(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    double lower,
    double upper,
    int property_id,
  ) {
    return _isar_filter_double(
      collection,
      filter,
      lower,
      upper,
      property_id,
    );
  }

  late final _isar_filter_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Double,
              ffi.Double,
              ffi.Uint32)>>('isar_filter_double');
  late final _isar_filter_double = _isar_filter_doublePtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>, double, double, int)>();

  int isar_filter_string(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<ffi.Char> lower,
    bool include_lower,
    ffi.Pointer<ffi.Char> upper,
    bool include_upper,
    bool case_sensitive,
    int property_id,
  ) {
    return _isar_filter_string(
      collection,
      filter,
      lower,
      include_lower ? 1 : 0,
      upper,
      include_upper ? 1 : 0,
      case_sensitive ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_string');
  late final _isar_filter_string = _isar_filter_stringPtr.asFunction<
      int Function(
          ffi.Pointer<IsarCollection>,
          ffi.Pointer<ffi.Pointer<Filter>>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int)>();

  int isar_filter_string_starts_with(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
    int property_id,
  ) {
    return _isar_filter_string_starts_with(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_string_starts_withPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_string_starts_with');
  late final _isar_filter_string_starts_with =
      _isar_filter_string_starts_withPtr.asFunction<
          int Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  int isar_filter_string_ends_with(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
    int property_id,
  ) {
    return _isar_filter_string_ends_with(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_string_ends_withPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_string_ends_with');
  late final _isar_filter_string_ends_with =
      _isar_filter_string_ends_withPtr.asFunction<
          int Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  int isar_filter_string_contains(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
    int property_id,
  ) {
    return _isar_filter_string_contains(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_string_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_string_contains');
  late final _isar_filter_string_contains =
      _isar_filter_string_containsPtr.asFunction<
          int Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  int isar_filter_string_matches(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Pointer<Filter>> filter,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
    int property_id,
  ) {
    return _isar_filter_string_matches(
      collection,
      filter,
      value,
      case_sensitive ? 1 : 0,
      property_id,
    );
  }

  late final _isar_filter_string_matchesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint32)>>('isar_filter_string_matches');
  late final _isar_filter_string_matches =
      _isar_filter_string_matchesPtr.asFunction<
          int Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Pointer<Filter>>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  void isar_key_create(
    ffi.Pointer<ffi.Pointer<IndexKey>> key,
  ) {
    return _isar_key_create(
      key,
    );
  }

  late final _isar_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<IndexKey>>)>>('isar_key_create');
  late final _isar_key_create = _isar_key_createPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<IndexKey>>)>();

  void isar_key_add_byte(
    ffi.Pointer<IndexKey> key,
    int value,
  ) {
    return _isar_key_add_byte(
      key,
      value,
    );
  }

  late final _isar_key_add_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>, ffi.Uint8)>>('isar_key_add_byte');
  late final _isar_key_add_byte = _isar_key_add_bytePtr
      .asFunction<void Function(ffi.Pointer<IndexKey>, int)>();

  void isar_key_add_int(
    ffi.Pointer<IndexKey> key,
    int value,
  ) {
    return _isar_key_add_int(
      key,
      value,
    );
  }

  late final _isar_key_add_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>, ffi.Int32)>>('isar_key_add_int');
  late final _isar_key_add_int = _isar_key_add_intPtr
      .asFunction<void Function(ffi.Pointer<IndexKey>, int)>();

  void isar_key_add_long(
    ffi.Pointer<IndexKey> key,
    int value,
  ) {
    return _isar_key_add_long(
      key,
      value,
    );
  }

  late final _isar_key_add_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>, ffi.Int64)>>('isar_key_add_long');
  late final _isar_key_add_long = _isar_key_add_longPtr
      .asFunction<void Function(ffi.Pointer<IndexKey>, int)>();

  void isar_key_add_float(
    ffi.Pointer<IndexKey> key,
    double value,
  ) {
    return _isar_key_add_float(
      key,
      value,
    );
  }

  late final _isar_key_add_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>, ffi.Float)>>('isar_key_add_float');
  late final _isar_key_add_float = _isar_key_add_floatPtr
      .asFunction<void Function(ffi.Pointer<IndexKey>, double)>();

  void isar_key_add_double(
    ffi.Pointer<IndexKey> key,
    double value,
  ) {
    return _isar_key_add_double(
      key,
      value,
    );
  }

  late final _isar_key_add_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>, ffi.Double)>>('isar_key_add_double');
  late final _isar_key_add_double = _isar_key_add_doublePtr
      .asFunction<void Function(ffi.Pointer<IndexKey>, double)>();

  void isar_key_add_string(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
  ) {
    return _isar_key_add_string(
      key,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  late final _isar_key_add_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('isar_key_add_string');
  late final _isar_key_add_string = _isar_key_add_stringPtr.asFunction<
      void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Char>, int)>();

  void isar_key_add_string_hash(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Char> value,
    bool case_sensitive,
  ) {
    return _isar_key_add_string_hash(
      key,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  late final _isar_key_add_string_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('isar_key_add_string_hash');
  late final _isar_key_add_string_hash =
      _isar_key_add_string_hashPtr.asFunction<
          void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Char>, int)>();

  void isar_key_add_string_list_hash(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
    int length,
    bool case_sensitive,
  ) {
    return _isar_key_add_string_list_hash(
      key,
      value,
      length,
      case_sensitive ? 1 : 0,
    );
  }

  late final _isar_key_add_string_list_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IndexKey>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Uint32,
              ffi.Uint8)>>('isar_key_add_string_list_hash');
  late final _isar_key_add_string_list_hash =
      _isar_key_add_string_list_hashPtr.asFunction<
          void Function(ffi.Pointer<IndexKey>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();

  void isar_key_add_byte_list_hash(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Uint8> value,
    int length,
  ) {
    return _isar_key_add_byte_list_hash(
      key,
      value,
      length,
    );
  }

  late final _isar_key_add_byte_list_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>>('isar_key_add_byte_list_hash');
  late final _isar_key_add_byte_list_hash =
      _isar_key_add_byte_list_hashPtr.asFunction<
          void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Uint8>, int)>();

  void isar_key_add_int_list_hash(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Int32> value,
    int length,
  ) {
    return _isar_key_add_int_list_hash(
      key,
      value,
      length,
    );
  }

  late final _isar_key_add_int_list_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Int32>,
              ffi.Uint32)>>('isar_key_add_int_list_hash');
  late final _isar_key_add_int_list_hash =
      _isar_key_add_int_list_hashPtr.asFunction<
          void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Int32>, int)>();

  void isar_key_add_long_list_hash(
    ffi.Pointer<IndexKey> key,
    ffi.Pointer<ffi.Int64> value,
    int length,
  ) {
    return _isar_key_add_long_list_hash(
      key,
      value,
      length,
    );
  }

  late final _isar_key_add_long_list_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Int64>,
              ffi.Uint32)>>('isar_key_add_long_list_hash');
  late final _isar_key_add_long_list_hash =
      _isar_key_add_long_list_hashPtr.asFunction<
          void Function(ffi.Pointer<IndexKey>, ffi.Pointer<ffi.Int64>, int)>();

  int isar_version() {
    return _isar_version();
  }

  late final _isar_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('isar_version');
  late final _isar_version = _isar_versionPtr.asFunction<int Function()>();

  int isar_create_instance(
    ffi.Pointer<ffi.Pointer<IsarInstance>> isar,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> path,
    bool relaxed_durability,
    ffi.Pointer<ffi.Char> schema_json,
  ) {
    return _isar_create_instance(
      isar,
      name,
      path,
      relaxed_durability ? 1 : 0,
      schema_json,
    );
  }

  late final _isar_create_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Pointer<IsarInstance>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ffi.Char>)>>('isar_create_instance');
  late final _isar_create_instance = _isar_create_instancePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<IsarInstance>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  void isar_create_instance_async(
    ffi.Pointer<ffi.Pointer<IsarInstance>> isar,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> path,
    bool relaxed_durability,
    ffi.Pointer<ffi.Char> schema_json,
    int port,
  ) {
    return _isar_create_instance_async(
      isar,
      name,
      path,
      relaxed_durability ? 1 : 0,
      schema_json,
      port,
    );
  }

  late final _isar_create_instance_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<IsarInstance>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ffi.Char>,
              DartPort)>>('isar_create_instance_async');
  late final _isar_create_instance_async =
      _isar_create_instance_asyncPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<IsarInstance>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  bool isar_close_instance(
    ffi.Pointer<IsarInstance> isar,
  ) {
    return _isar_close_instance(
          isar,
        ) !=
        0;
  }

  late final _isar_close_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<IsarInstance>)>>(
      'isar_close_instance');
  late final _isar_close_instance = _isar_close_instancePtr
      .asFunction<int Function(ffi.Pointer<IsarInstance>)>();

  bool isar_close_delete_instance(
    ffi.Pointer<IsarInstance> isar,
  ) {
    return _isar_close_delete_instance(
          isar,
        ) !=
        0;
  }

  late final _isar_close_delete_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<IsarInstance>)>>(
      'isar_close_delete_instance');
  late final _isar_close_delete_instance = _isar_close_delete_instancePtr
      .asFunction<int Function(ffi.Pointer<IsarInstance>)>();

  int isar_get_collection(
    ffi.Pointer<IsarInstance> isar,
    ffi.Pointer<ffi.Pointer<IsarCollection>> collection,
    int index,
  ) {
    return _isar_get_collection(
      isar,
      collection,
      index,
    );
  }

  late final _isar_get_collectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarInstance>,
              ffi.Pointer<ffi.Pointer<IsarCollection>>,
              ffi.Uint32)>>('isar_get_collection');
  late final _isar_get_collection = _isar_get_collectionPtr.asFunction<
      int Function(ffi.Pointer<IsarInstance>,
          ffi.Pointer<ffi.Pointer<IsarCollection>>, int)>();

  int isar_get_static_size_and_offsets(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<ffi.Uint32> offsets,
  ) {
    return _isar_get_static_size_and_offsets(
      collection,
      offsets,
    );
  }

  late final _isar_get_static_size_and_offsetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<IsarCollection>,
              ffi.Pointer<ffi.Uint32>)>>('isar_get_static_size_and_offsets');
  late final _isar_get_static_size_and_offsets =
      _isar_get_static_size_and_offsetsPtr.asFunction<
          int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<ffi.Uint32>)>();

  int isar_link(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int link_id,
    int id,
    int target_id,
  ) {
    return _isar_link(
      collection,
      txn,
      link_id,
      id,
      target_id,
    );
  }

  late final _isar_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Uint32, ffi.Int64, ffi.Int64)>>('isar_link');
  late final _isar_link = _isar_linkPtr.asFunction<
      int Function(
          ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int, int, int)>();

  int isar_link_unlink(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int link_id,
    int id,
    int target_id,
  ) {
    return _isar_link_unlink(
      collection,
      txn,
      link_id,
      id,
      target_id,
    );
  }

  late final _isar_link_unlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Uint32, ffi.Int64, ffi.Int64)>>('isar_link_unlink');
  late final _isar_link_unlink = _isar_link_unlinkPtr.asFunction<
      int Function(
          ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int, int, int)>();

  int isar_link_unlink_all(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int link_id,
    int id,
  ) {
    return _isar_link_unlink_all(
      collection,
      txn,
      link_id,
      id,
    );
  }

  late final _isar_link_unlink_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>,
              ffi.Uint32, ffi.Int64)>>('isar_link_unlink_all');
  late final _isar_link_unlink_all = _isar_link_unlink_allPtr.asFunction<
      int Function(
          ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int, int)>();

  int isar_link_update_all(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int link_id,
    int id,
    ffi.Pointer<ffi.Int64> ids,
    int link_count,
    int unlink_count,
    bool replace,
  ) {
    return _isar_link_update_all(
      collection,
      txn,
      link_id,
      id,
      ids,
      link_count,
      unlink_count,
      replace ? 1 : 0,
    );
  }

  late final _isar_link_update_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint8)>>('isar_link_update_all');
  late final _isar_link_update_all = _isar_link_update_allPtr.asFunction<
      int Function(ffi.Pointer<IsarCollection>, ffi.Pointer<CIsarTxn>, int, int,
          ffi.Pointer<ffi.Int64>, int, int, int)>();

  ffi.Pointer<QueryBuilder> isar_qb_create(
    ffi.Pointer<IsarCollection> collection,
  ) {
    return _isar_qb_create(
      collection,
    );
  }

  late final _isar_qb_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QueryBuilder> Function(
              ffi.Pointer<IsarCollection>)>>('isar_qb_create');
  late final _isar_qb_create = _isar_qb_createPtr.asFunction<
      ffi.Pointer<QueryBuilder> Function(ffi.Pointer<IsarCollection>)>();

  int isar_qb_add_id_where_clause(
    ffi.Pointer<QueryBuilder> builder,
    int start_id,
    int end_id,
  ) {
    return _isar_qb_add_id_where_clause(
      builder,
      start_id,
      end_id,
    );
  }

  late final _isar_qb_add_id_where_clausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<QueryBuilder>, ffi.Int64,
              ffi.Int64)>>('isar_qb_add_id_where_clause');
  late final _isar_qb_add_id_where_clause = _isar_qb_add_id_where_clausePtr
      .asFunction<int Function(ffi.Pointer<QueryBuilder>, int, int)>();

  int isar_qb_add_index_where_clause(
    ffi.Pointer<QueryBuilder> builder,
    int index_id,
    ffi.Pointer<IndexKey> start_key,
    bool include_start,
    ffi.Pointer<IndexKey> end_key,
    bool include_end,
    bool skip_duplicates,
  ) {
    return _isar_qb_add_index_where_clause(
      builder,
      index_id,
      start_key,
      include_start ? 1 : 0,
      end_key,
      include_end ? 1 : 0,
      skip_duplicates ? 1 : 0,
    );
  }

  late final _isar_qb_add_index_where_clausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<QueryBuilder>,
              ffi.Uint32,
              ffi.Pointer<IndexKey>,
              ffi.Uint8,
              ffi.Pointer<IndexKey>,
              ffi.Uint8,
              ffi.Uint8)>>('isar_qb_add_index_where_clause');
  late final _isar_qb_add_index_where_clause =
      _isar_qb_add_index_where_clausePtr.asFunction<
          int Function(ffi.Pointer<QueryBuilder>, int, ffi.Pointer<IndexKey>,
              int, ffi.Pointer<IndexKey>, int, int)>();

  int isar_qb_add_link_where_clause(
    ffi.Pointer<QueryBuilder> builder,
    ffi.Pointer<IsarCollection> source_collection,
    int link_id,
    int id,
  ) {
    return _isar_qb_add_link_where_clause(
      builder,
      source_collection,
      link_id,
      id,
    );
  }

  late final _isar_qb_add_link_where_clausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<QueryBuilder>,
              ffi.Pointer<IsarCollection>,
              ffi.Uint32,
              ffi.Int64)>>('isar_qb_add_link_where_clause');
  late final _isar_qb_add_link_where_clause =
      _isar_qb_add_link_where_clausePtr.asFunction<
          int Function(ffi.Pointer<QueryBuilder>, ffi.Pointer<IsarCollection>,
              int, int)>();

  void isar_qb_set_filter(
    ffi.Pointer<QueryBuilder> builder,
    ffi.Pointer<Filter> filter,
  ) {
    return _isar_qb_set_filter(
      builder,
      filter,
    );
  }

  late final _isar_qb_set_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<QueryBuilder>,
              ffi.Pointer<Filter>)>>('isar_qb_set_filter');
  late final _isar_qb_set_filter = _isar_qb_set_filterPtr.asFunction<
      void Function(ffi.Pointer<QueryBuilder>, ffi.Pointer<Filter>)>();

  int isar_qb_add_sort_by(
    ffi.Pointer<QueryBuilder> builder,
    int property_id,
    bool asc,
  ) {
    return _isar_qb_add_sort_by(
      builder,
      property_id,
      asc ? 1 : 0,
    );
  }

  late final _isar_qb_add_sort_byPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<QueryBuilder>, ffi.Uint32,
              ffi.Uint8)>>('isar_qb_add_sort_by');
  late final _isar_qb_add_sort_by = _isar_qb_add_sort_byPtr
      .asFunction<int Function(ffi.Pointer<QueryBuilder>, int, int)>();

  int isar_qb_add_distinct_by(
    ffi.Pointer<QueryBuilder> builder,
    int property_id,
    bool case_sensitive,
  ) {
    return _isar_qb_add_distinct_by(
      builder,
      property_id,
      case_sensitive ? 1 : 0,
    );
  }

  late final _isar_qb_add_distinct_byPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<QueryBuilder>, ffi.Uint32,
              ffi.Uint8)>>('isar_qb_add_distinct_by');
  late final _isar_qb_add_distinct_by = _isar_qb_add_distinct_byPtr
      .asFunction<int Function(ffi.Pointer<QueryBuilder>, int, int)>();

  void isar_qb_set_offset_limit(
    ffi.Pointer<QueryBuilder> builder,
    int offset,
    int limit,
  ) {
    return _isar_qb_set_offset_limit(
      builder,
      offset,
      limit,
    );
  }

  late final _isar_qb_set_offset_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<QueryBuilder>, ffi.Int64,
              ffi.Int64)>>('isar_qb_set_offset_limit');
  late final _isar_qb_set_offset_limit = _isar_qb_set_offset_limitPtr
      .asFunction<void Function(ffi.Pointer<QueryBuilder>, int, int)>();

  ffi.Pointer<Query> isar_qb_build(
    ffi.Pointer<QueryBuilder> builder,
  ) {
    return _isar_qb_build(
      builder,
    );
  }

  late final _isar_qb_buildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Query> Function(
              ffi.Pointer<QueryBuilder>)>>('isar_qb_build');
  late final _isar_qb_build = _isar_qb_buildPtr
      .asFunction<ffi.Pointer<Query> Function(ffi.Pointer<QueryBuilder>)>();

  void isar_q_free(
    ffi.Pointer<Query> query,
  ) {
    return _isar_q_free(
      query,
    );
  }

  late final _isar_q_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Query>)>>(
          'isar_q_free');
  late final _isar_q_free =
      _isar_q_freePtr.asFunction<void Function(ffi.Pointer<Query>)>();

  int isar_q_find(
    ffi.Pointer<Query> query,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<CObjectSet> result,
    int limit,
  ) {
    return _isar_q_find(
      query,
      txn,
      result,
      limit,
    );
  }

  late final _isar_q_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<Query>, ffi.Pointer<CIsarTxn>,
              ffi.Pointer<CObjectSet>, ffi.Uint32)>>('isar_q_find');
  late final _isar_q_find = _isar_q_findPtr.asFunction<
      int Function(ffi.Pointer<Query>, ffi.Pointer<CIsarTxn>,
          ffi.Pointer<CObjectSet>, int)>();

  int isar_q_delete(
    ffi.Pointer<Query> query,
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    int limit,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _isar_q_delete(
      query,
      collection,
      txn,
      limit,
      count,
    );
  }

  late final _isar_q_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<Query>,
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('isar_q_delete');
  late final _isar_q_delete = _isar_q_deletePtr.asFunction<
      int Function(ffi.Pointer<Query>, ffi.Pointer<IsarCollection>,
          ffi.Pointer<CIsarTxn>, int, ffi.Pointer<ffi.Uint32>)>();

  int isar_q_export_json(
    ffi.Pointer<Query> query,
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<CIsarTxn> txn,
    ffi.Pointer<ffi.Char> id_name,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> json_bytes,
    ffi.Pointer<ffi.Uint32> json_length,
  ) {
    return _isar_q_export_json(
      query,
      collection,
      txn,
      id_name,
      json_bytes,
      json_length,
    );
  }

  late final _isar_q_export_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<Query>,
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<CIsarTxn>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint32>)>>('isar_q_export_json');
  late final _isar_q_export_json = _isar_q_export_jsonPtr.asFunction<
      int Function(
          ffi.Pointer<Query>,
          ffi.Pointer<IsarCollection>,
          ffi.Pointer<CIsarTxn>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Uint32>)>();

  void isar_free_json(
    ffi.Pointer<ffi.Uint8> json_bytes,
    int json_length,
  ) {
    return _isar_free_json(
      json_bytes,
      json_length,
    );
  }

  late final _isar_free_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('isar_free_json');
  late final _isar_free_json = _isar_free_jsonPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  int isar_q_aggregate(
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<Query> query,
    ffi.Pointer<CIsarTxn> txn,
    int operation,
    int property_id,
    ffi.Pointer<ffi.Pointer<AggregationResult>> result,
  ) {
    return _isar_q_aggregate(
      collection,
      query,
      txn,
      operation,
      property_id,
      result,
    );
  }

  late final _isar_q_aggregatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int64 Function(
                  ffi.Pointer<IsarCollection>,
                  ffi.Pointer<Query>,
                  ffi.Pointer<CIsarTxn>,
                  ffi.Uint8,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Pointer<AggregationResult>>)>>(
      'isar_q_aggregate');
  late final _isar_q_aggregate = _isar_q_aggregatePtr.asFunction<
      int Function(
          ffi.Pointer<IsarCollection>,
          ffi.Pointer<Query>,
          ffi.Pointer<CIsarTxn>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<AggregationResult>>)>();

  int isar_q_aggregate_long_result(
    ffi.Pointer<AggregationResult> result,
  ) {
    return _isar_q_aggregate_long_result(
      result,
    );
  }

  late final _isar_q_aggregate_long_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<AggregationResult>)>>('isar_q_aggregate_long_result');
  late final _isar_q_aggregate_long_result = _isar_q_aggregate_long_resultPtr
      .asFunction<int Function(ffi.Pointer<AggregationResult>)>();

  double isar_q_aggregate_double_result(
    ffi.Pointer<AggregationResult> result,
  ) {
    return _isar_q_aggregate_double_result(
      result,
    );
  }

  late final _isar_q_aggregate_double_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<AggregationResult>)>>(
      'isar_q_aggregate_double_result');
  late final _isar_q_aggregate_double_result =
      _isar_q_aggregate_double_resultPtr
          .asFunction<double Function(ffi.Pointer<AggregationResult>)>();

  int isar_txn_begin(
    ffi.Pointer<IsarInstance> isar,
    ffi.Pointer<ffi.Pointer<CIsarTxn>> txn,
    bool sync1,
    bool write,
    bool silent,
    int port,
  ) {
    return _isar_txn_begin(
      isar,
      txn,
      sync1 ? 1 : 0,
      write ? 1 : 0,
      silent ? 1 : 0,
      port,
    );
  }

  late final _isar_txn_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<IsarInstance>,
              ffi.Pointer<ffi.Pointer<CIsarTxn>>,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint8,
              DartPort)>>('isar_txn_begin');
  late final _isar_txn_begin = _isar_txn_beginPtr.asFunction<
      int Function(ffi.Pointer<IsarInstance>,
          ffi.Pointer<ffi.Pointer<CIsarTxn>>, int, int, int, int)>();

  int isar_txn_finish(
    ffi.Pointer<CIsarTxn> txn,
    bool commit,
  ) {
    return _isar_txn_finish(
      txn,
      commit ? 1 : 0,
    );
  }

  late final _isar_txn_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<CIsarTxn>, ffi.Uint8)>>('isar_txn_finish');
  late final _isar_txn_finish = _isar_txn_finishPtr
      .asFunction<int Function(ffi.Pointer<CIsarTxn>, int)>();

  ffi.Pointer<WatchHandle> isar_watch_collection(
    ffi.Pointer<IsarInstance> isar,
    ffi.Pointer<IsarCollection> collection,
    int port,
  ) {
    return _isar_watch_collection(
      isar,
      collection,
      port,
    );
  }

  late final _isar_watch_collectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WatchHandle> Function(ffi.Pointer<IsarInstance>,
              ffi.Pointer<IsarCollection>, DartPort)>>('isar_watch_collection');
  late final _isar_watch_collection = _isar_watch_collectionPtr.asFunction<
      ffi.Pointer<WatchHandle> Function(
          ffi.Pointer<IsarInstance>, ffi.Pointer<IsarCollection>, int)>();

  ffi.Pointer<WatchHandle> isar_watch_object(
    ffi.Pointer<IsarInstance> isar,
    ffi.Pointer<IsarCollection> collection,
    int id,
    int port,
  ) {
    return _isar_watch_object(
      isar,
      collection,
      id,
      port,
    );
  }

  late final _isar_watch_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WatchHandle> Function(
              ffi.Pointer<IsarInstance>,
              ffi.Pointer<IsarCollection>,
              ffi.Int64,
              DartPort)>>('isar_watch_object');
  late final _isar_watch_object = _isar_watch_objectPtr.asFunction<
      ffi.Pointer<WatchHandle> Function(
          ffi.Pointer<IsarInstance>, ffi.Pointer<IsarCollection>, int, int)>();

  ffi.Pointer<WatchHandle> isar_watch_query(
    ffi.Pointer<IsarInstance> isar,
    ffi.Pointer<IsarCollection> collection,
    ffi.Pointer<Query> query,
    int port,
  ) {
    return _isar_watch_query(
      isar,
      collection,
      query,
      port,
    );
  }

  late final _isar_watch_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WatchHandle> Function(
              ffi.Pointer<IsarInstance>,
              ffi.Pointer<IsarCollection>,
              ffi.Pointer<Query>,
              DartPort)>>('isar_watch_query');
  late final _isar_watch_query = _isar_watch_queryPtr.asFunction<
      ffi.Pointer<WatchHandle> Function(ffi.Pointer<IsarInstance>,
          ffi.Pointer<IsarCollection>, ffi.Pointer<Query>, int)>();

  void isar_stop_watching(
    ffi.Pointer<WatchHandle> handle,
  ) {
    return _isar_stop_watching(
      handle,
    );
  }

  late final _isar_stop_watchingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WatchHandle>)>>(
          'isar_stop_watching');
  late final _isar_stop_watching = _isar_stop_watchingPtr
      .asFunction<void Function(ffi.Pointer<WatchHandle>)>();
}

class CObject extends ffi.Struct {
  @ffi.Int64()
  external int id;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Uint32()
  external int buffer_length;
}

class CObjectSet extends ffi.Struct {
  external ffi.Pointer<CObject> objects;

  @ffi.Uint32()
  external int length;
}

class CObjectCollectionSet extends ffi.Struct {
  external ffi.Pointer<CObject> objects;

  external ffi.Pointer<ffi.Pointer<IsarCollection>> collections;

  @ffi.Uint32()
  external int length;
}

class IsarCollection extends ffi.Opaque {}

class CLink extends ffi.Struct {
  @ffi.Int64()
  external int source_id;

  @ffi.Int64()
  external int target_id;

  @ffi.Uint32()
  external int link_id;

  @ffi.Uint8()
  external int new_target;
}

class CLinkSet extends ffi.Struct {
  external ffi.Pointer<CLink> links;

  @ffi.Uint32()
  external int length;
}

class CObjectLinkSet extends ffi.Struct {
  external CObjectSet objects;

  external CObjectCollectionSet linked_objects;

  external CLinkSet added_links;

  external CLinkSet removed_links;
}

class CIsarTxn extends ffi.Opaque {}

class IndexKey extends ffi.Opaque {}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Int8 Function(DartPort, ffi.Pointer<DartCObject>)>>;
typedef DartPort = ffi.Int64;

class DartCObject extends ffi.Opaque {}

class Filter extends ffi.Opaque {}

class IsarInstance extends ffi.Opaque {}

class QueryBuilder extends ffi.Opaque {}

class Query extends ffi.Opaque {}

class AggregationResult extends ffi.Opaque {}

class WatchHandle extends ffi.Opaque {}

const int IsarIndex_MAX_STRING_INDEX_SIZE = 1024;

const int IsarObject_NULL_BYTE = 0;

const int IsarObject_FALSE_BYTE = 1;

const int IsarObject_TRUE_BYTE = 2;

const int IsarObject_NULL_INT = -2147483648;

const int IsarObject_NULL_LONG = -9223372036854775808;
